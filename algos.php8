<?php

// Bubble Sort
function bubbleSort($arr) {
    $n = count($arr);
    for ($i = 0; $i < $n - 1; $i++) {
        for ($j = 0; $j < $n - $i - 1; $j++) {
            if ($arr[$j] > $arr[$j + 1]) {
                $temp = $arr[$j];
                $arr[$j] = $arr[$j + 1];
                $arr[$j + 1] = $temp;
            }
        }
    }
    return $arr;
}

// Quick Sort
function quickSort($arr) {
    $length = count($arr);
    if ($length <= 1) {
        return $arr;
    }
    $pivot = $arr[0];
    $left = $right = [];
    for ($i = 1; $i < $length; $i++) {
        if ($arr[$i] < $pivot) {
            $left[] = $arr[$i];
        } else {
            $right[] = $arr[$i];
        }
    }
    return array_merge(quickSort($left), [$pivot], quickSort($right));
}

// Merge Sort
function mergeSort($arr) {
    $count = count($arr);
    if ($count <= 1) {
        return $arr;
    }
    $middle = (int)($count / 2);
    $left = array_slice($arr, 0, $middle);
    $right = array_slice($arr, $middle);
    $left = mergeSort($left);
    $right = mergeSort($right);
    return merge($left, $right);
}

function merge($left, $right) {
    $result = [];
    while (count($left) > 0 && count($right) > 0) {
        if ($left[0] < $right[0]) {
            array_push($result, array_shift($left));
        } else {
            array_push($result, array_shift($right));
        }
    }
    return array_merge($result, $left, $right);
}

// Binary Search
function binarySearch($arr, $target) {
    $left = 0;
    $right = count($arr) - 1;
    while ($left <= $right) {
        $mid = $left + (int)(($right - $left) / 2);
        if ($arr[$mid] === $target) {
            return $mid;
        }
        if ($arr[$mid] < $target) {
            $left = $mid + 1;
        } else {
            $right = $mid - 1;
        }
    }
    return -1;
}

// Depth-First Search (DFS)
class Graph {
    private $vertices;
    private $adjacencyList;

    public function __construct($vertices) {
        $this->vertices = $vertices;
        $this->adjacencyList = array_fill(0, $vertices, []);
    }

    public function addEdge($start, $end) {
        $this->adjacencyList[$start][] = $end;
    }

    public function dfs($start) {
        $visited = array_fill(0, $this->vertices, false);
        $result = [];
        $this->dfsUtil($start, $visited, $result);
        return $result;
    }

    private function dfsUtil($vertex, &$visited, &$result) {
        $visited[$vertex] = true;
        $result[] = $vertex;
        foreach ($this->adjacencyList[$vertex] as $neighbor) {
            if (!$visited[$neighbor]) {
                $this->dfsUtil($neighbor, $visited, $result);
            }
        }
    }
}

// Breadth-First Search (BFS)
class Graph {
    private $vertices;
    private $adjacencyList;

    public function __construct($vertices) {
        $this->vertices = $vertices;
        $this->adjacencyList = array_fill(0, $vertices, []);
    }

    public function addEdge($start, $end) {
        $this->adjacencyList[$start][] = $end;
    }

    public function bfs($start) {
        $visited = array_fill(0, $this->vertices, false);
        $result = [];
        $queue = [];
        array_push($queue, $start);
        $visited[$start] = true;
        while (!empty($queue)) {
            $vertex = array_shift($queue);
            $result[] = $vertex;
            foreach ($this->adjacencyList[$vertex] as $neighbor) {
                if (!$visited[$neighbor]) {
                    array_push($queue, $neighbor);
                    $visited[$neighbor] = true;
                }
            }
        }
        return $result;
    }
}

// Dijkstra's Algorithm
class Graph {
    private $vertices;
    private $adjacencyList;

    public function __construct($vertices) {
        $this->vertices = $vertices;
        $this->adjacencyList = array_fill(0, $vertices, []);
    }

    public function addEdge($start, $end, $weight) {
        $this->adjacencyList[$start][] = ["end" => $end, "weight" => $weight];
    }

    public function dijkstra($start) {
        $dist = array_fill(0, $this->vertices, PHP_INT_MAX);
        $dist[$start] = 0;
        $visited = [];
        for ($i = 0; $i < $this->vertices - 1; $i++) {
            $u = $this->minDistance($dist, $visited);
            $visited[$u] = true;
            foreach ($this->adjacencyList[$u] as $neighbor) {
                $v = $neighbor["end"];
                $weight = $neighbor["weight"];
                if (!$visited[$v] && $dist[$u] !== PHP_INT_MAX && $dist[$u] + $weight < $dist[$v]) {
                    $dist[$v] = $dist[$u] + $weight;
                }
            }
        }
        return $dist;
    }

    private function minDistance($dist, $visited) {
        $min = PHP_INT_MAX;
        $minIndex = -1;
        foreach ($dist as $key => $value) {
            if (!$visited[$key] && $value <= $min) {
                $min = $value;
                $minIndex = $key;
            }
        }
        return $minIndex;
    }
}

// Floyd-Warshall Algorithm
function floydWarshall($graph) {
    $n = count($graph);
    $dist = $graph;
    for ($k = 0; $k < $n; $k++) {
        for ($i = 0; $i < $n; $i++) {
            for ($j = 0; $j < $n; $j++) {
                if ($dist[$i][$k] + $dist[$k][$j] < $dist[$i][$j]) {
                    $dist[$i][$j] = $dist[$i][$k] + $dist[$k][$j];
                }
            }
        }
    }
    return $dist;
}

// Kruskal's Algorithm
class Graph {
    private $vertices;
    private $edges;

    public function __construct($vertices) {
        $this->vertices = $vertices;
        $this->edges = [];
    }

    public function addEdge($start, $end, $weight) {
        $this->edges[] = ["start" => $start, "end" => $end, "weight" => $weight];
    }

    public function kruskalMST() {
        usort($this->edges, function ($a, $b) {
            return $a["weight"] - $b["weight"];
        });
        $result = [];
        $parent = array_fill(0, $this->vertices, -1);
        foreach ($this->edges as $edge) {
            $x = $this->find($parent, $edge["start"]);
            $y = $this->find($parent, $edge["end"]);
            if ($x !== $y) {
                $result[] = $edge;
                $this->union($parent, $x, $y);
            }
        }
        return $result;
    }

    private function find(&$parent, $i) {
        if ($parent[$i] === -1) {
            return $i;
        }
        return $this->find($parent, $parent[$i]);
    }

    private function union(&$parent, $x, $y) {
        $xRoot = $this->find($parent, $x);
        $yRoot = $this->find($parent, $y);
        $parent[$xRoot] = $yRoot;
    }
}

// Topological Sort
function topologicalSort($graph) {
    $result = [];
    $visited = [];
    $stack = [];
    $dfs = function ($node) use (&$dfs, &$visited, &$stack, $graph) {
        $visited[$node] = true;
        foreach ($graph[$node] as $neighbor) {
            if (!isset($visited[$neighbor])) {
                $dfs($neighbor);
            }
        }
        array_push($stack, $node);
    };
    foreach (array_keys($graph) as $node) {
        if (!isset($visited[$node])) {
            $dfs($node);
        }
    }
    while (!empty($stack)) {
        $result[] = array_pop($stack);
    }
    return $result;
}

// Knapsack Problem (Dynamic Programming)
function knapsackProblem($values, $weights, $capacity) {
    $n = count($values);
    $dp = array_fill(0, $n + 1, array_fill(0, $capacity + 1, 0));
    for ($i = 0; $i <= $n; $i++) {
        for ($w = 0; $w <= $capacity; $w++) {
            if ($i === 0 || $w === 0) {
                $dp[$i][$w] = 0;
            } elseif ($weights[$i - 1] <= $w) {
                $dp[$i][$w] = max($values[$i - 1] + $dp[$i - 1][$w - $weights[$i - 1]], $dp[$i - 1][$w]);
            } else {
                $dp[$i][$w] = $dp[$i - 1][$w];
            }
        }
    }
    $result = [];
    $i = $n;
    $w = $capacity;
    while ($i > 0 && $w > 0) {
        if ($dp[$i][$w] !== $dp[$i - 1][$w]) {
            $result[] = $i - 1;
            $w -= $weights[$i - 1];
        }
        $i--;
    }
    return $result;
}

// Longest Common Subsequence (Dynamic Programming)
function longestCommonSubsequence($x, $y) {
    $m = strlen($x);
    $n = strlen($y);
    $dp = array_fill(0, $m + 1, array_fill(0, $n + 1, 0));
    for ($i = 1; $i <= $m; $i++) {
        for ($j = 1; $j <= $n; $j++) {
            if ($x[$i - 1] === $y[$j - 1]) {
                $dp[$i][$j] = $dp[$i - 1][$j - 1] + 1;
            } else {
                $dp[$i][$j] = max($dp[$i - 1][$j], $dp[$i][$j - 1]);
            }
        }
    }
    $lcs = [];
    $i = $m;
    $j = $n;
    while ($i > 0 && $j > 0) {
        if ($x[$i - 1] === $y[$j - 1]) {
            array_push($lcs, $x[$i - 1]);
            $i--;
            $j--;
        } elseif ($dp[$i - 1][$j] > $dp[$i][$j - 1]) {
            $i--;
        } else {
            $j--;
        }
    }
    return array_reverse($lcs);
}

// Test the algorithms

// Bubble Sort
$arr = [64, 34, 25, 12, 22, 11, 90];
bubbleSort($arr);
echo "Bubble Sort Result: " . implode(", ", $arr) . PHP_EOL;

// Quick Sort
$arr = [64, 34, 25, 12, 22, 11, 90];
$arr = quickSort($arr);
echo "Quick Sort Result: " . implode(", ", $arr) . PHP_EOL;

// Merge Sort
$arr = [64, 34, 25, 12, 22, 11, 90];
$arr = mergeSort($arr);
echo "Merge Sort Result: " . implode(", ", $arr) . PHP_EOL;

// Binary Search
$arr = [11, 12, 22, 25, 34, 64, 90];
$target = 25;
$index = binarySearch($arr, $target);
echo "Binary Search Result: Element $target found at index $index" . PHP_EOL;

// Depth-First Search (DFS)
$g = new Graph(4);
$g->addEdge(0, 1);
$g->addEdge(0, 2);
$g->addEdge(1, 2);
$g->addEdge(2, 0);
$g->addEdge(2, 3);
$g->addEdge(3, 3);
$dfsResult = $g->dfs(2);
echo "DFS Result: " . implode(", ", $dfsResult) . PHP_EOL;

// Breadth-First Search (BFS)
$g = new Graph(4);
$g->addEdge(0, 1);
$g->addEdge(0, 2);
$g->addEdge(1, 2);
$g->addEdge(2, 0);
$g->addEdge(2, 3);
$g->addEdge(3, 3);
$bfsResult = $g->bfs(2);
echo "BFS Result: " . implode(", ", $bfsResult) . PHP_EOL;

// Dijkstra's Algorithm
$g = new Graph(5);
$g->addEdge(0, 1, 2);
$g->addEdge(0, 2, 4);
$g->addEdge(1, 2, 1);
$g->addEdge(1, 3, 7);
$g->addEdge(2, 3, 4);
$dijkstraResult = $g->dijkstra(0);
echo "Dijkstra's Algorithm Result: " . implode(", ", $dijkstraResult) . PHP_EOL;

// Floyd-Warshall Algorithm
$graph = [
    [0, 5, PHP_FLOAT_INFINITY, 10],
    [PHP_FLOAT_INFINITY, 0, 3, PHP_FLOAT_INFINITY],
    [PHP_FLOAT_INFINITY, PHP_FLOAT_INFINITY, 0, 1],
    [PHP_FLOAT_INFINITY, PHP_FLOAT_INFINITY, PHP_FLOAT_INFINITY, 0]
];
$floydWarshallResult = floydWarshall($graph);
echo "Floyd-Warshall Algorithm Result:" . PHP_EOL;
foreach ($floydWarshallResult as $row) {
    echo implode(", ", $row) . PHP_EOL;
}

// Kruskal's Algorithm
$g = new Graph(4);
$g->addEdge(0, 1, 10);
$g->addEdge(0, 2, 6);
$g->addEdge(0, 3, 5);
$g->addEdge(1, 3, 15);
$g->addEdge(2, 3, 4);
$kruskalResult = $g->kruskalMST();
echo "Kruskal's Algorithm Result: " . json_encode($kruskalResult) . PHP_EOL;

// Topological Sort
$graph = [
    0 => [1, 2],
    1 => [3],
    2 => [3],
    3 => [],
];
$topologicalSortResult = topologicalSort($graph);
echo "Topological Sort Result: " . implode(", ", $topologicalSortResult) . PHP_EOL;

// Knapsack Problem
$values = [60, 100, 120];
$weights = [10, 20, 30];
$capacity = 50;
$knapsackResult = knapsackProblem($values, $weights, $capacity);
echo "Knapsack Problem Result: " . json_encode($knapsackResult) . PHP_EOL;

// Longest Common Subsequence
$X = "AGGTAB";
$Y = "GXTXAYB";
$lcsResult = longestCommonSubsequence($X, $Y);
echo "Longest Common Subsequence Result: " . implode("", $lcsResult) . PHP_EOL;
